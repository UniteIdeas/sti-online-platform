# Run the playbook with
# ansible-playbook -i hosts --ask-vault-pass playbook.yml
# AWS PEM file must be added prior to execution, using
# ssh-add aws-ocit2.pem
- hosts: webservers
  remote_user: root
  become: yes
  vars_files:
      - vault.yml
  tasks:
      - name: Add STI user
        user:
            name: sti
            state: present
      - name: Update all packages 
        apt:
            update_cache: yes
            upgrade: dist
      - name: Install nginx
        apt:
            name: nginx
            state: latest
      - name: Enable nginx
        systemd:
            name: nginx
            enabled: yes
      - name: Install pip
        apt:
            name: python-pip
            state: latest
      - name: Install Python3 venv
        apt:
            name: python3-venv
            state: latest
      - name: Create sti database user
        vars:
            ansible_python_interpreter: /home/sti/bin/python
        postgresql_user:
            db: postgres
            name: "{{vault_dbuser}}"
            password: "{{vault_dbpassword}}"
            login_host: "{{dbhost}}"
            port: "{{dbport}}"
            login_user: "{{vault_dbmasteruser}}"
            login_password: "{{vault_dbmasterpassword}}"
            no_password_changes: true
            role_attr_flags: CREATEDB,LOGIN
            state: present
      - name: Create sti database
        vars:
            ansible_python_interpreter: /home/sti/bin/python
        postgresql_db:
            name: sti
            encoding: UTF-8
            owner: "{{vault_dbuser}}"
            login_host: "{{dbhost}}"
            port: "{{dbport}}"
            login_user: "{{vault_dbuser}}"
            login_password: "{{vault_dbpassword}}"
            state: present

- hosts: webservers
  remote_user: sti
  become: yes
  vars_files:
      - vault.yml
  environment:
        DJANGO_SETTINGS_MODULE: onlineplatform.live
        DJANGO_SECRET_KEY: "{{vault_django_secret_key}}"
        DJANGO_DATABASE_USER: "{{vault_dbuser}}"
        DJANGO_DATABASE_PASSWORD: "{{vault_dbpassword}}"
        DJANGO_DATABASE_HOST: "{{dbhost}}"
        DJANGO_DATABASE_PORT: "{{dbport}}"
  tasks:
      - name: Create Python3 venv
        command: python3 -m venv /home/sti
        args:
            creates: /home/sti/pyvenv.cfg
      - name: Copy pip requirements file to server
        copy:
            src: ../requirements.txt
            dest: /home/sti/requirements
      - name: Install requirements
        pip:
            requirements: /home/sti/requirements
            virtualenv: /home/sti
      - name: Install gunicorn
        pip:
            name: gunicorn
            virtualenv: /home/sti
      - name: Rsync onlineplatform app
        synchronize:
            src: ../onlineplatform
            dest: /home/sti
            recursive: yes
            delete: yes
            rsync_opts:
                - "--exclude=__pycache__"
                - "--exclude=ingest/data"
      - name: Migrate database
        command: /home/sti/bin/python /home/sti/onlineplatform/manage.py migrate
      - name: Collect static files
        command: /home/sti/bin/python /home/sti/onlineplatform/manage.py collectstatic --no-input

- hosts: webservers
  remote_user: root
  become: yes
  vars_files:
      - vault.yml
  tasks:
      - name: Create directory for logs
        file:
            path: /var/log/onlineplatform/
            state: directory
            owner: sti
            group: sti
      - name: Gunicorn socket
        copy:
            src: conf/gunicorn.socket
            dest: /etc/systemd/system/gunicorn.socket 
      - name: Start Gunicorn
        systemd:
            name: gunicorn.socket
            enabled: yes
            daemon_reload: yes
            state: started
      - name: Gunicorn service
        template:
            src: conf/gunicorn.service
            dest: /etc/systemd/system/gunicorn.service
      - name: Gunicorn tmpfile
        copy:
            src: conf/gunicorn.conf
            dest: /etc/tmpfiles.d/gunicorn.conf
      - name: Restart Gunicorn
        systemd:
            name: gunicorn.service
            daemon_reload: yes
            state: restarted
      - name: Configure nginx
        copy:
            src: conf/nginx.site
            dest: /etc/nginx/sites-available/onlineplatform
      - name: Disable default nginx site
        file:
            path: /etc/nginx/sites-enabled/default
            state: absent
      - name: Enable onlineplatform site in nginx
        file:
            src: /etc/nginx/sites-available/onlineplatform
            dest: /etc/nginx/sites-enabled/onlineplatform
            state: link
      - name: Restart nginx service
        systemd:
            name: nginx.service
            state: restarted
